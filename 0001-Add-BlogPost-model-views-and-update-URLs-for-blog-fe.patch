From c586b9334d644cff897ce13e9c33bf283ebe66d0 Mon Sep 17 00:00:00 2001
From: claire-bit <clairemutindi324@gmail.com>
Date: Thu, 26 Jun 2025 16:29:08 +0300
Subject: Add BlogPost model, views, and update URLs for blog feature

---
 globalconnect024/urls.py |  2 --
 users/models.py          | 27 +++++++++++++++++++
 users/serializers.py     |  8 +++++-
 users/urls.py            |  6 +++++
 users/views.py           | 58 +++++++++++++++++++++++++++++++++++++++-
 5 files changed, 97 insertions(+), 4 deletions(-)

diff --git a/globalconnect024/urls.py b/globalconnect024/urls.py
index f1f751b..d961a80 100644
--- a/globalconnect024/urls.py
+++ b/globalconnect024/urls.py
@@ -31,8 +31,6 @@ urlpatterns = [
     # ✅ Your user routes
     path('api/users/', include('users.urls')),
 
-
-    # path('api/contact/', include('contact.urls')),  # Contact form (optional)
     # path('api/blogs/', include('blogs.urls')),      # Blog APIs
     # path('api/', include('core.urls')),
 
diff --git a/users/models.py b/users/models.py
index 1ffc7b5..5b3b4c7 100644
--- a/users/models.py
+++ b/users/models.py
@@ -1,7 +1,34 @@
 # models.py
+from django.db import models
 from django.contrib.auth.models import AbstractUser
+from django.contrib.auth import get_user_model
+
 
 class CustomUser(AbstractUser):
     class Meta:
         verbose_name = 'Global User'
         verbose_name_plural = 'Global Users'
+
+
+class BlogPost(models.Model):
+    STATUS_CHOICES = [
+        ('draft', 'Draft'),
+        ('published', 'Published'),
+        ('scheduled', 'Scheduled'),
+    ]
+
+    title = models.CharField(max_length=255)
+    slug = models.SlugField(unique=True)
+    content = models.TextField()
+    excerpt = models.TextField(blank=True)
+    category = models.CharField(max_length=100)
+    tags = models.JSONField(default=list)  # Or use ManyToMany if you have a Tag model
+    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='draft')
+    featured_image = models.URLField(blank=True)
+    publish_date = models.DateField(null=True, blank=True)
+    author = models.ForeignKey(get_user_model(), on_delete=models.CASCADE)
+    meta_title = models.CharField(max_length=60, blank=True)
+    meta_description = models.TextField(max_length=160, blank=True)
+
+    def __str__(self):
+        return self.title
diff --git a/users/serializers.py b/users/serializers.py
index b3aedb4..707c8c3 100644
--- a/users/serializers.py
+++ b/users/serializers.py
@@ -3,6 +3,7 @@ from rest_framework import serializers
 from django.contrib.auth.password_validation import validate_password
 from rest_framework.validators import UniqueValidator
 from users.utils import send_activation_email  # ✅ import this
+from .models import BlogPost
 
 User = get_user_model()
 
@@ -53,4 +54,9 @@ class UserSerializer(serializers.ModelSerializer):
         fields = [
             'id', 'username', 'first_name', 'last_name',
             'email', 'is_active', 'date_joined'
-        ]
\ No newline at end of file
+        ]
+
+class BlogPostSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = BlogPost
+        fields = '__all__'        
\ No newline at end of file
diff --git a/users/urls.py b/users/urls.py
index 33c7c91..94ffb1e 100644
--- a/users/urls.py
+++ b/users/urls.py
@@ -10,6 +10,9 @@ from .views import (
     PasswordResetRequestView,
     PasswordResetConfirmView,
     UpdateProfileView,
+    ContactFormView,
+    BlogPostCreateView,
+    UserBlogPostListView,
 )
 
 urlpatterns = [
@@ -32,4 +35,7 @@ urlpatterns = [
     # ✅ Password reset
     path('password/reset/', PasswordResetRequestView.as_view(), name='password_reset'),
     path('password/reset/confirm/', PasswordResetConfirmView.as_view(), name='password_reset_confirm'),
+    path('contact/', ContactFormView.as_view(), name='contact-form'),
+    path('api/blogs/create/', BlogPostCreateView.as_view(), name='create-blog'),
+    path('blogs/my-posts/', UserBlogPostListView.as_view(), name='user-blogs'),
 ]
diff --git a/users/views.py b/users/views.py
index 4746d4d..373af21 100644
--- a/users/views.py
+++ b/users/views.py
@@ -1,6 +1,6 @@
 # accounts/views.py 
 
-from rest_framework import generics, status
+from rest_framework import generics, status, permissions
 from rest_framework.response import Response
 from rest_framework.permissions import IsAuthenticated
 from rest_framework.views import APIView
@@ -16,6 +16,8 @@ from rest_framework.generics import RetrieveUpdateAPIView
 from .serializers import RegistrationSerializer, UserSerializer
 from .tokens import account_activation_token  # your custom token
 from .utils import send_activation_email
+from .models import BlogPost
+from .serializers import BlogPostSerializer
 
 User = get_user_model()
 
@@ -160,3 +162,57 @@ class EmailOrUsernameTokenObtainSerializer(TokenObtainPairSerializer):
 
 class EmailOrUsernameTokenObtainPairView(TokenObtainPairView):
     serializer_class = EmailOrUsernameTokenObtainSerializer
+
+class ContactFormView(APIView):
+    def post(self, request):
+        name = request.data.get("name")
+        email = request.data.get("email")
+        phone = request.data.get("phone")
+        subject = request.data.get("subject")
+        message = request.data.get("message")
+
+        if not name or not email or not message:
+            return Response(
+                {"error": "Name, email and message are required."},
+                status=status.HTTP_400_BAD_REQUEST
+            )
+
+        # Combine message content
+        full_message = f"""
+You have a new contact form submission:
+
+Name: {name}
+Email: {email}
+Phone: {phone or 'N/A'}
+Subject: {subject}
+Message:
+{message}
+        """
+
+        try:
+            send_mail(
+                subject=f"New Contact Message: {subject}",
+                message=full_message,
+                from_email=settings.DEFAULT_FROM_EMAIL,
+                recipient_list=["024globalconnect@gmail.com"],
+                fail_silently=False,
+            )
+        except Exception as e:
+            return Response(
+                {"error": "Failed to send email. Please try again later."},
+                status=status.HTTP_500_INTERNAL_SERVER_ERROR
+            )
+
+        return Response({"message": "Your message has been sent successfully!"}, status=status.HTTP_200_OK)
+
+
+class BlogPostCreateView(generics.CreateAPIView):
+    queryset = BlogPost.objects.all()
+    serializer_class = BlogPostSerializer
+
+class UserBlogPostListView(generics.ListAPIView):
+    serializer_class = BlogPostSerializer
+    permission_classes = [permissions.IsAuthenticated]
+
+    def get_queryset(self):
+        return BlogPost.objects.filter(author=self.request.user)
\ No newline at end of file
-- 
2.44.0.windows.1

